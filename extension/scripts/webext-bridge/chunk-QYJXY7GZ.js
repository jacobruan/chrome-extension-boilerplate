var promise,getMessagePort=(e,s,t)=>null!=promise?promise:promise=new Promise((o=>{const r=n=>{const{data:{cmd:a,scope:i,context:p},ports:w}=n;if("webext-port-offer"===a&&i===s&&p!==e)return window.removeEventListener("message",r),w[0].onmessage=t,w[0].postMessage("port-accepted"),o(w[0])},n=()=>{const n=new MessageChannel;n.port1.onmessage=e=>{if("port-accepted"===e.data)return window.removeEventListener("message",r),o(n.port1);null==t||t(e)},window.postMessage({cmd:"webext-port-offer",scope:s,context:e},"*",[n.port2])};window.addEventListener("message",r),"window"===e?setTimeout(n,0):n()})),usePostMessaging=e=>{let s,t,o,r=!1;return{enable:()=>r=!0,onMessage:e=>t=e,postMessage:async t=>{if("content-script"!==e&&"window"!==e)throw new Error("Endpoint does not use postMessage");if(!r)throw new Error("Communication with window has not been allowed");return ensureNamespaceSet(s),(await o).postMessage(t)},setNamespace:r=>{if(s)throw new Error("Namespace once set cannot be changed");s=r,o=getMessagePort(e,r,(({data:e})=>null==t?void 0:t(e)))}}};function ensureNamespaceSet(e){if("string"!=typeof e||0===e.trim().length)throw new Error("webext-bridge uses window.postMessage to talk with other \"window\"(s) for message routingwhich is global/conflicting operation in case there are other scripts using webext-bridge. Call Bridge#setNamespace(nsps) to isolate your app. Example: setNamespace('com.facebook.react-devtools'). Make sure to use same namespace across all your scripts whereever window.postMessage is likely to be used`")}export{usePostMessaging};