import{PortMessage,createDeliveryLogger,createFingerprint,decodeConnectionArgs}from"./chunk-G7AOUSAZ.js";import{createEndpointRuntime,createStreamWirings}from"./chunk-4J4II3XU.js";import{formatEndpoint,parseEndpoint}from"./chunk-YWICFM2F.js";import browser from"webextension-polyfill";var pendingResponses=createDeliveryLogger(),connMap=new Map,oncePortConnectedCbs=new Map,onceSessionEndCbs=new Map,oncePortConnected=(n,e)=>(oncePortConnectedCbs.set(n,(oncePortConnectedCbs.get(n)||new Set).add(e)),()=>{const t=oncePortConnectedCbs.get(n);(null==t?void 0:t.delete(e))&&0===(null==t?void 0:t.size)&&oncePortConnectedCbs.delete(n)}),onceSessionEnded=(n,e)=>{onceSessionEndCbs.set(n,(onceSessionEndCbs.get(n)||new Set).add(e))},notifyEndpoint=n=>({withFingerprint:e=>{const t=n=>({and:()=>n}),o={aboutIncomingMessage:e=>{const i=connMap.get(n);return PortMessage.toExtensionContext(i.port,{status:"incoming",message:e}),t(o)},aboutSuccessfulDelivery:e=>{const i=connMap.get(n);return PortMessage.toExtensionContext(i.port,{status:"delivered",receipt:e}),t(o)},aboutMessageUndeliverability:(i,r)=>{const s=connMap.get(n);return(null==s?void 0:s.fingerprint)===e&&PortMessage.toExtensionContext(s.port,{status:"undeliverable",resolvedDestination:i,message:r}),t(o)},whenDeliverableTo:i=>{const r=()=>{const t=connMap.get(n);if((null==t?void 0:t.fingerprint)===e&&connMap.has(i))return PortMessage.toExtensionContext(t.port,{status:"deliverable",deliverableTo:i}),!0};if(!r()){const n=oncePortConnected(i,r);onceSessionEnded(e,n)}return t(o)},aboutSessionEnded:i=>{const r=connMap.get(n);return(null==r?void 0:r.fingerprint)===e&&PortMessage.toExtensionContext(r.port,{status:"terminated",fingerprint:i}),t(o)}};return o}}),sessFingerprint=createFingerprint(),endpointRuntime=createEndpointRuntime("background",(n=>{var e;if("background"===n.origin.context&&["content-script","devtools "].includes(n.destination.context)&&!n.destination.tabId)throw new TypeError("When sending messages from background page, use @tabId syntax to target specific tab");const t=formatEndpoint({...n.origin,..."window"===n.origin.context&&{context:"content-script"}}),o=formatEndpoint({...n.destination,..."window"===n.destination.context&&{context:"content-script"},tabId:n.destination.tabId||n.origin.tabId});n.destination.tabId=null,n.destination.frameId=null;const i=()=>connMap.get(o),r=()=>connMap.get(t),s=()=>{var e;notifyEndpoint(o).withFingerprint(i().fingerprint).aboutIncomingMessage(n);const s={message:n,to:i().fingerprint,from:{endpointId:t,fingerprint:null==(e=r())?void 0:e.fingerprint}};"message"===n.messageType&&pendingResponses.add(s),"reply"===n.messageType&&pendingResponses.remove(n.messageID),r()&&notifyEndpoint(t).withFingerprint(r().fingerprint).aboutSuccessfulDelivery(s)};(null==(e=i())?void 0:e.port)?s():"message"===n.messageType&&("background"===n.origin.context?oncePortConnected(o,s):r()&&notifyEndpoint(t).withFingerprint(r().fingerprint).aboutMessageUndeliverability(o,n).and().whenDeliverableTo(o))}),(n=>{const e=formatEndpoint({...n.origin,..."window"===n.origin.context&&{context:"content-script"}}),t=connMap.get(e),o={message:n,to:sessFingerprint,from:{endpointId:e,fingerprint:t.fingerprint}};notifyEndpoint(e).withFingerprint(t.fingerprint).aboutSuccessfulDelivery(o)}));browser.runtime.onConnect.addListener((n=>{var e;const t=decodeConnectionArgs(n.name);if(!t)return;t.endpointName||(t.endpointName=formatEndpoint({context:"content-script",tabId:n.sender.tab.id,frameId:n.sender.frameId}));const{tabId:o,frameId:i}=parseEndpoint(t.endpointName);connMap.set(t.endpointName,{fingerprint:t.fingerprint,port:n}),null==(e=oncePortConnectedCbs.get(t.endpointName))||e.forEach((n=>n())),oncePortConnectedCbs.delete(t.endpointName),onceSessionEnded(t.fingerprint,(()=>{const n=pendingResponses.entries().filter((n=>n.to===t.fingerprint));pendingResponses.remove(n),n.forEach((n=>{"background"===n.from.endpointId?endpointRuntime.endTransaction(n.message.transactionId):notifyEndpoint(n.from.endpointId).withFingerprint(n.from.fingerprint).aboutSessionEnded(t.fingerprint)}))})),n.onDisconnect.addListener((()=>{var n,e;(null==(n=connMap.get(t.endpointName))?void 0:n.fingerprint)===t.fingerprint&&connMap.delete(t.endpointName),null==(e=onceSessionEndCbs.get(t.fingerprint))||e.forEach((n=>n())),onceSessionEndCbs.delete(t.fingerprint)})),n.onMessage.addListener((n=>{var e,r;if("sync"===n.type){const e=[...connMap.values()].map((n=>n.fingerprint)),o=n.pendingResponses.filter((n=>e.includes(n.to)));return pendingResponses.add(...o),n.pendingResponses.filter((n=>!e.includes(n.to))).forEach((n=>notifyEndpoint(t.endpointName).withFingerprint(t.fingerprint).aboutSessionEnded(n.to))),void n.pendingDeliveries.forEach((n=>notifyEndpoint(t.endpointName).withFingerprint(t.fingerprint).whenDeliverableTo(n)))}"deliver"===n.type&&(null==(r=null==(e=n.message)?void 0:e.origin)?void 0:r.context)&&(n.message.origin.tabId=o,n.message.origin.frameId=i,endpointRuntime.handleMessage(n.message))}))}));var{sendMessage,onMessage}=endpointRuntime,{openStream,onOpenStreamChannel}=createStreamWirings(endpointRuntime);export{onMessage,onOpenStreamChannel,openStream,sendMessage};