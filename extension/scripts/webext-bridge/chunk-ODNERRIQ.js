import{PortMessage,createDeliveryLogger,createFingerprint,encodeConnectionArgs}from"./chunk-G7AOUSAZ.js";import browser from"webextension-polyfill";var createPersistentPort=(e="")=>{const s=createFingerprint();let r,t=[];const n=createDeliveryLogger(),o=new Set,a=new Set,i=(e,s)=>{switch(e.status){case"undeliverable":return void(t.some((s=>s.message.messageID===e.message.messageID))||(t=[...t,{message:e.message,resolvedDestination:e.resolvedDestination}]));case"deliverable":return void(t=t.reduce(((r,t)=>t.resolvedDestination===e.deliverableTo?(PortMessage.toBackground(s,{type:"deliver",message:t.message}),r):[...r,t]),[]));case"delivered":return void("message"===e.receipt.message.messageType&&n.add(e.receipt));case"incoming":return"reply"===e.message.messageType&&n.remove(e.message.messageID),void o.forEach((r=>r(e.message,s)));case"terminated":{const s=n.entries().filter((s=>e.fingerprint===s.to));n.remove(s),s.forEach((({message:e})=>a.forEach((s=>s(e)))))}}},g=()=>{r=browser.runtime.connect({name:encodeConnectionArgs({endpointName:e,fingerprint:s})}),r.onMessage.addListener(i),r.onDisconnect.addListener(g),PortMessage.toBackground(r,{type:"sync",pendingResponses:n.entries(),pendingDeliveries:[...new Set(t.map((({resolvedDestination:e})=>e)))]})};return g(),{onFailure(e){a.add(e)},onMessage(e){o.add(e)},postMessage(e){PortMessage.toBackground(r,{type:"deliver",message:e})}}};export{createPersistentPort};